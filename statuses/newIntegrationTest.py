from rldd import rldd2
from requests import request
import json

host = "10.10.80.20"
statusCode = "60"

db = rldd2.DEV_connect()
claims = db.claims.find({
    "customClaimNumber": {
        "$in": [
            "P001-3555377920-23264568",
            "P001-7685275926-23264573",
            "P001-7685275926-23264574",
            "P001-7685275926-23264575",
            "P001-7685275926-23264578",
            "F502-0823378-1329000054",
            "P001-7685275926-23264580",
            "P001-2626304432-23264583",
            "P001-2626304432-23264584",
            "P001-2626304432-23264585",
            "P001-2626304432-23264586",
            "P001-7392134657-23264587",
            "P001-1739978764-23264589",
            "P001-7392134657-23264590",
            "M503-2987048420-23264591",
            "B090-1122429024-23264376",
            "B090-1122429024-23264362",
            "B090-1122429024-23264381",
            "P001-8712596335-23264593",
            "P001-7685275926-23264594",
            "P001-3377309599-23264595",
            "F502-4763223-1329000055",
            "M503-2774122673-23264596",
            "M503-7662248038-23264597",
            "P001-0741814448-23264598",
            "M503-2774122673-23264599",
            "P001-5081547445-23264600",
            "P001-5081547445-23264601",
            "M503-2774122673-23264602",
            "P001-8445505941-23264603",
            "P001-5691115953-23264604",
            "P001-0355829221-23264605",
            "M503-7662248038-23264606",
            "P001-9519562333-23264608",
            "P001-9677455979-23264609",
            "M503-7662248038-23264610",
            "M503-2774122673-23264611",
            "P001-1946030364-23264613",
            "P001-9997039165-23264615",
            "P001-1930761800-23264616",
            "P001-1946030364-23264617",
            "M503-1267161717-23264618",
            "P001-3030115537-23264620",
            "F503-2833907-0000000026",
            "P001-6692868475-23264621",
            "P001-0189927935-23264622",
            "P001-2928718349-23264623",
            "P001-7429823936-23264624",
            "P001-5081547445-23264625",
            "P001-1178186753-23264626",
            "P001-5081547445-23264627",
            "P001-2626304432-23264628",
            "P001-2626304432-23264629",
            "P001-2626304432-23264630",
            "P001-2626304432-23264631",
            "P001-7392134657-23264632",
            "P001-2070950210-23264633",
            "P001-2626304432-23264634",
            "P001-2626304432-23264635",
            "P001-2626304432-23264636",
            "P001-2626304432-23264637",
            "P001-7392134657-23264638",
            "P001-3010512336-23264639",
            "P001-7392134657-23264640",
            "P001-5081547445-23264641",
            "P001-4558249662-23264642",
            "P001-3706383172-23264643",
            "P001-6445173586-23264644",
            "M503-3416173931-23264645",
            "M503-2987048420-23264646",
            "P001-0267718122-23264647",
            "M503-2987048420-23264648",
            "P001-5081547445-23264649",
            "M503-7662248038-23264654",
            "M503-7662248038-23264655",
            "P001-5081547445-23264665",
            "P001-5081547445-23264666",
            "P001-5081547445-23264667",
            "P001-5081547445-23264668",
            "P001-5081547445-23264669",
            "P001-5081547445-23264670",
            "P001-5081547445-23264671",
            "P001-5081547445-23264672",
            "P001-5081547445-23264673",
            "M503-7662248038-23264674",
            "M503-7662248038-23264675",
            "M503-2987048420-23264676",
            "P001-5081547445-23264677",
            "M503-6556516244-23264678",
            "M503-2580818887-23264680",
            "M503-2580818887-23264681",
            "P001-4234454521-23264652",
            "M503-8433976260-23264682",
            "M503-7662248038-23264683",
            "M503-7662248038-23264684",
            "M503-7662248038-23264685",
            "M503-7662248038-23264686",
            "M503-6556516244-23264687",
            "P001-5081547445-23264689",
            "M503-7662248038-23264688",
            "M503-7662248038-23264690",
            "M503-7662248038-23264691",
            "M503-7662248038-23264692",
            "M503-7662248038-23264693",
            "M503-7662248038-23264694",
            "P001-2641469272-23264696",
            "M503-7662248038-23264697",
            "M503-6556516244-23264699",
            "P001-4497194130-23264700",
            "M503-2580818887-23264701",
            "P001-6588810424-23264702",
            "P001-7062491374-23264703",
            "P001-9943575844-23264704",
            "P001-4839661278-23264707",
            "M503-6556516244-23264706",
            "P001-4381681947-23264710",
            "P001-4381681947-23264711",
            "P001-7685275926-23264712",
            "P001-7685275926-23264714",
            "M503-2987048420-23264717",
            "M503-2987048420-23264718",
            "P001-7392134657-23264719",
            "P001-4155487537-23264720",
            "P001-2626304432-23264721",
            "P001-2626304432-23264722",
            "P001-2626304432-23264723",
            "P001-2626304432-23264724",
            "P001-7392134657-23264725",
            "M503-6556516244-23264729",
            "M503-2987048420-23264742",
            "M503-2987048420-23264743",
            "M503-9686469133-23264744",
            "P001-2626304432-23264745",
            "P001-2626304432-23264746",
            "P001-2626304432-23264747",
            "P001-2626304432-23264748",
            "P001-7392134657-23264749",
            "M503-2474607901-23264462",
            "M503-2474607901-23264465",
            "M503-2474607901-23264483",
            "M503-2474607901-23264485",
            "M503-2474607901-23264486",
            "P001-5081547445-23264490",
            "P001-5081547445-23264492",
            "P001-5081547445-23264493",
            "P001-5081547445-23264495",
            "M503-2474607901-23264497",
            "M503-2474607901-23264499",
            "P001-5081547445-23264500"
        ]
    }
})


def create_status(claim_id):
    url = f"http://{host}/api/statuses/"
    headers = {
        'Content-Type': 'application/json'
    }
    new_status = {
        "claimId": str(claim_id),
        "createState": "INIT",
        "statusCode": statusCode
    }
    response = request("POST", url=url, headers=headers, data=json.dumps(new_status))
    resJson = json.loads(response.text.encode('utf8'))
    return resJson["id"]


def create_doc(owner_id, owner_type):
    url = f"http://{host}/api/docs"
    headers = {
        'Content-Type': 'application/json'
    }
    docInit = {
        "ownerId": str(owner_id),
        "ownerType": str(owner_type),
        "type": {
            "title": "Тестовый файл",
            "required": False
        },
        "title": "Тестовый файл"
    }
    response = request("POST", url=url, headers=headers, data=json.dumps(docInit))
    resJson = json.loads(response.text.encode('utf8'))
    return resJson["id"]


def send_file(doc_id):
    url = f"http://{host}/api/fs/file"
    payload = {
        'documentId': str(doc_id),
        'name': 'test'
    }
    files = [
        ('file', open('test.txt', 'rb'))
    ]
    return request("POST", url, data=payload, files=files)


def update_status(status_id, claim_id):
    url = f"http://{host}/api/statuses/"
    headers = {
        'Content-Type': 'application/json'
    }
    upd_status = {
        "id": str(status_id),
        "claimId": str(claim_id),
        "statusCode": statusCode,
        "createState": "COMPLETED",
    }
    response = request("POST", url=url, headers=headers, data=json.dumps(upd_status))
    resJson = json.loads(response.text.encode('utf8'))
    return resJson


for claim in claims:
    claimId = claim["_id"]
    statusId = create_status(claimId)
    docId = create_doc(statusId, "STATUS")
    sendFile = send_file(docId)
    updateStatus = update_status(statusId, claimId)
    print(updateStatus)
